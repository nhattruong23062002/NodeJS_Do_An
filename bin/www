#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('nodejs:server');
var http = require('http');
const socketIo = require('socket.io');
const cors = require('cors');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3333');
app.set('port', port);

/**
 * Create HTTP server.
 */


var server = http.createServer(app);
const io = socketIo(server, {
  cors: {
    origin: '*',
  }
});

// Server side
io.on('connection', socket => {
  socket.on('joinRoom', ({ roomId }) => {
    socket.join(roomId);
  });

  socket.on('chat', ({ roomId, message }) => {
    const messageData = {
      content:message,
      roomId: roomId
    }
    console.log('««««« message »»»»»', message);
    io.to(roomId).emit('message', messageData);
  });

  socket.on('on-update', ({ roomId }) => {
    const updateData = {
      roomId: roomId
    }
    io.emit('update', updateData);
  });

  socket.on('getRooms', () => {
    const rooms = socket.adapter.rooms;
    const roomList = [];
    for (const room of rooms.keys()) {
      if (room.includes('-647efdae66502ca93f65d13d')) {
        roomList.push(room);
      }
    }
    socket.emit('roomList', roomList);
  });

  socket.on('disconnect', () => {
    console.log('User disconnected');
  });
});


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
